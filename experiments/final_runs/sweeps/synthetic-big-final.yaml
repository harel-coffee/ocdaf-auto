# This is a sweep on different phase changing strategies and how
# it can affect the training process for larger datasets
project: synthetic-run-big
checkpoint_interval: 30
default_root_dir: experiments/sweep
use_smart_trainer: True
agent_run_args:
  count: 10000
sweep_configuration:
  method: grid
  metric:
    goal: minimize
    name: metrics/average-backward_relative_penalty
  parameters:
    sweep_group_C_graph_size:
      sweep: True
      sweep_identifier: C_graph_size_and_scheduling
      sweep_alias:
        - n10
        - n25
      values:
        - data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_n10")
                scm_generator_args:
                  graph_generator_args:
                    n: 10
                    graph_type: erdos_renyi
                    p: 0.4
        - data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_n25")
                scm_generator_args:
                  graph_generator_args:
                    n: 25
                    graph_type: erdos_renyi
                    p: 0.4
          model:
            init_args:
              model_args:
                permutation_learner_args:
                  # for preventing CUDA out of memory
                  maximum_basis_size: 64
    sweep_group_A_scm_type:
      sweep: True
      sweep_identifier: E_scm_type
      sweep_alias:
        - cubed_dislocate
        - sin_plus_x
        - non_param
      values:
        - data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_CubeDislocate")
                scm_generator: ocd.data.synthetic.ParametricSCMGenerator
                scm_generator_args:
                  graph_generator: ocd.data.scm.GraphGenerator
                  noise_parameters:
                    loc: 0.0
                    scale: 1.0
                  noise_type: normal
                  s_function:
                    function_descriptor: |
                      def func(x):
                        x[x < 100] = numpy.log(1 + numpy.exp(x[x < 100]))
                        return x
                    function_of_interest: func
                  s_function_signature: softplus
                  t_function:
                    function_descriptor: |
                      def func(x):
                        x[x > 100] = 100
                        x[x < -100] = -100
                        x_mean = numpy.mean(x)
                        x_std = numpy.std(x)
                        if x_std == 0:
                          x_std = 1
                        x = (x - x_mean) / x_std
                        ret = x**3 + 6
                        return ret
                    function_of_interest: func
                  t_function_signature: cube_and_dislocate
                  weight_s: [0.5, 1.5]
                  weight_t: [0.5, 1.5]
              val_size: 0.01
              batch_size: 128
          # Put scale transform for the parametric ones
          model:
            init_args:
              model_args:
                scale_transform: true
                scale_transform_s_args:
                  pre_act_scale: 0.4
                  post_act_scale: 5.
                scale_transform_t_args:
                  pre_act_scale: 0.05
                  post_act_scale: 20.
        - data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_SinPlusX")
                scm_generator: ocd.data.synthetic.ParametricSCMGenerator
                scm_generator_args:
                  graph_generator: ocd.data.scm.GraphGenerator
                  noise_parameters:
                    loc: 0.0
                    scale: 1.0
                  noise_type: normal
                  s_function:
                    function_descriptor: |
                      def func(x):
                        x[x < 100] = numpy.log(1 + numpy.exp(x[x < 100]))
                        return x
                    function_of_interest: func
                  s_function_signature: softplus
                  t_function:
                    function_descriptor: |
                      def func(x):
                        return numpy.sin(x) + x
                    function_of_interest: func
                  t_function_signature: sin_plus_x
                  weight_s: [0.5, 1.5]
                  weight_t: [0.5, 1.5]
        - data:
            class_path: lightning_toolbox.DataModule
            init_args:
              dataset: ocd.data.SyntheticOCDDataset
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_NonParam")
                observation_size: 1000
                scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                scm_generator_args:
                  graph_generator: ocd.data.scm.GraphGenerator
                  noise_mean: 0.0
                  noise_std: 1.0
                  s_gamma_rbf_kernel: 1.0
                  s_mean_function_activation:
                    function_descriptor:
                      "def func(x):\n    x[x < 100] = numpy.log(1 + numpy.exp(x[x\
                      \ < 100]))\n    return x"
                    function_of_interest: func
                  s_mean_function_activation_signature: softplus
                  s_mean_function_weights:
                    - 0.01
                    - 0.1
                  s_variance_rbf_kernel: 1.0
                  t_mean_function_activation:
                    function_descriptor: |
                      def func(x):
                        x[x > 100] = 100
                        x[x < -100] = -100
                        x_mean = numpy.mean(x)
                        x_std = numpy.std(x)
                        if x_std == 0:
                          x_std = 1
                        x = (x - x_mean) / x_std
                        ret = x + numpy.sin(x)
                        return ret
                    function_of_interest: func
                  t_mean_function_activation_signature: sin_plus_x
                  t_mean_function_weights:
                    - 0.01
                    - 0.1
                  t_variance_rbf_kernel: 1.0
              val_size: 0.01
              batch_size: 128
          model:
            init_args:
              model_args:
                scale_transform: false
    sweep_group_G_seeds:
      sweep: True
      sweep_identifier: G_seed
      sweep_alias:
        - seedset0
        - seedset1
        - seedset2
        - seedset3
        - seedset4
      values:
        - seed_everything: 10
          data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_seed0")
                seed: 11
                scm_generator_args:
                  seed: 13
                  graph_generator_args:
                    seed: 14
        - seed_everything: 20
          data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_seed1")
                seed: 21
                scm_generator_args:
                  seed: 23
                  graph_generator_args:
                    seed: 24
        - seed_everything: 30
          data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_seed2")
                seed: 21
                scm_generator_args:
                  seed: 23
                  graph_generator_args:
                    seed: 24
        - seed_everything: 40
          data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_seed3")
                seed: 41
                scm_generator_args:
                  seed: 43
                  graph_generator_args:
                    seed: 44
        - seed_everything: 50
          data:
            init_args:
              dataset_args:
                name: >
                  sweep_eval(lambda x: f"{x}_seed4")
                seed: 51
                scm_generator_args:
                  seed: 53
                  graph_generator_args:
                    seed: 54
