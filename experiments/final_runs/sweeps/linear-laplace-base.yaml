# This is a sweep on different phase changing strategies and how
# it can affect the training process for larger datasets
trainer:
  # callbacks
  callbacks:
    - class_path: ocd.training.callbacks.data_visualizer.DataVisualizer
    - class_path: ocd.training.callbacks.phase_changer.PhaseChangerCallback
      init_args:
        monitor_validation: False
        monitor_training: True
        reset_optimizers: False
        reinitialize_weights_on_maximization: False
    - class_path: ocd.training.callbacks.save_results.SavePermutationResultsCallback
      init_args:
        save_path: experiments/final_runs/sweeps/synthetic-small-parametric
        num_samples: 5000
        log_every_n_epochs: 5
  accelerator: gpu
  devices: 1
  num_nodes: 0
  log_every_n_steps: 1
  check_val_every_n_epoch: 1
  enable_checkpointing: true
  enable_model_summary: true
  enable_progress_bar: false
  logger:
    class_path: lightning.pytorch.loggers.WandbLogger
    init_args:
      project: smart-trainer

data:
  class_path: lightning_toolbox.DataModule
  init_args:
    batch_size: 128
    val_size: 0.01
    dataset: ocd.data.SyntheticOCDDataset
    dataset_args:
      observation_size: 1000
      standardization: True
      reject_outliers_n_far_from_mean: 5
      name: synthetic_parametric
      scm_generator: ocd.data.synthetic.ParametricSCMGenerator
      scm_generator_args:
        noise_type: laplace
        noise_parameters:
          loc: 0.0
          scale: 1.0
        s_function:
          # we perform normalization for same variance not to work
          function_descriptor: |
            def func(x):
              numpy.random.seed(int(numpy.mean(x)))
              return numpy.random.uniform() * numpy.ones_like(x)
          function_of_interest: func
        s_function_signature: steady
        t_function:
          # we perform normalization for varsort not to work
          function_descriptor: |
            def func(x):
              x[x > 100] = 100
              x[x < -100] = -100
              x_mean = numpy.mean(x)
              x_std = numpy.std(x)
              if x_std == 0:
                x_std = 1
              x = (x - x_mean) / x_std
              return x
          function_of_interest: func
        t_function_signature: ident_normalize
        graph_generator: ocd.data.scm.GraphGenerator
        weight_s: [0.5, 1.5]
        weight_t: [0.5, 1.5]
model:
  class_path: ocd.training.module.OCDafTrainingModule
  init_args:
    # the model
    model_cls: ocd.models.ocdaf.OCDAF
    model_args:
      # Permutation learner arguments
      use_permutation: True
      permutation_learner_cls: ocd.models.permutation.LearnablePermutation
      permutation_learner_args:
        gumbel_noise_std: >
          lambda self, training_module, **kwargs: 2 - (2 / (training_module.trainer.max_epochs)) * (training_module.current_epoch)
      # The flow model arguments
      layers: [10, 5, 5]
      populate_features: True
      layers_limit: [100, 300, 50]
      num_transforms: 1
      additive: False
      residual: False
      bias: true
      # activations
      activation: torch.nn.LeakyReLU
      activation_args:
        negative_slope: 0.1
      # scale transform
      scale_transform: true
      scale_transform_s_args:
        pre_act_scale: 0.4
        post_act_scale: 5.
      scale_transform_t_args:
        pre_act_scale: 0.02
        post_act_scale: 50.

    # the optimizer
    optimizer_parameters:
      - model.flow
      - model.permutation_model
    optimizer_is_active:
      - >
        lambda training_module: training_module.current_phase == 'maximization' if hasattr(training_module, 'current_phase') else True
      - >
        lambda training_module: training_module.current_phase == 'expectation' if hasattr(training_module, 'current_phase') else True
    grad_clip_val: 1.0
    lr: [0.01, 0.01]
    optimizer: [torch.optim.AdamW, torch.optim.AdamW]
    optimizer_args:
      - weight_decay: 0.1
      - weight_decay: 0.01
    scheduler:
      - torch.optim.lr_scheduler.ReduceLROnPlateau
      - torch.optim.lr_scheduler.ReduceLROnPlateau
    scheduler_args:
      - mode: min
        min_lr: 0.00005
        threshold: 0.001
      - mode: min
        min_lr: 0.0005
        threshold: 0.001
    scheduler_name: ["lr_scheduler_maximization", "lr_scheduler_expectation"]
    scheduler_optimizer: [0, 1]
    scheduler_monitor: ["loss", "loss"]
    objective_args:
      nll:
        code: >
          def func(training_module, batch):
            t = training_module.forward(batch)
            res = t['log_prob']
            return -res.mean()
        function_of_interest: func
