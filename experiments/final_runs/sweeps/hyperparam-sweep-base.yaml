# This is a sweep on different phase changing strategies and how
# it can affect the training process for larger datasets
trainer:
  # callbacks
  callbacks:
    - class_path: ocd.training.callbacks.phase_changer.PhaseChangerCallback
      init_args:
        starting_phase: maximization
        # Set to higher value for faster results
        # The settings regarding epoch limit values
        maximization_epoch_limit: 120
        expectation_epoch_limit: 120
        # The settings regarding the generalization gap
        patience: 25
        threshold: 0.0001
        cooldown: 50
        reset_optimizers: False
        reinitialize_weights_on_maximization: False
        monitor_validation: False
        monitor_training: True
    - class_path: ocd.training.callbacks.save_results.SavePermutationResultsCallback
      init_args:
        save_path: experiments/sweep/phasechanging-save-path
        num_samples: 5000
        log_every_n_epochs: 5
  accelerator: gpu
  devices: 1
  num_nodes: 0
  max_epochs: 1500 # SWEEP on this
  log_every_n_steps: 1
  check_val_every_n_epoch: 1
  enable_checkpointing: true
  enable_model_summary: true
  enable_progress_bar: false
  logger:
    class_path: lightning.pytorch.loggers.WandbLogger
    init_args:
      project: smart-trainer

data:
  class_path: lightning_toolbox.DataModule
  init_args:
    batch_size: 128
    val_size: 0.01
    dataset: ocd.data.SyntheticOCDDataset
    dataset_args:
      observation_size: 1000
      standardization: True
      reject_outliers_n_far_from_mean: 5
      seed: 100

model:
  class_path: ocd.training.module.OCDafTrainingModule
  init_args:
    # the model
    model_cls: ocd.models.ocdaf.OCDAF
    model_args:
      # Permutation learner arguments
      use_permutation: True
      permutation_learner_cls: ocd.models.permutation.LearnablePermutation
      permutation_learner_args:
        gumbel_noise_std: >
          lambda self, training_module, **kwargs: 2 - (2 / (training_module.trainer.max_epochs)) * (training_module.current_epoch)
        permutation_type: hybrid-sparse-map-simulator
      # Base distribution arguments
      base_distribution: torch.distributions.Normal
      base_distribution_args:
        loc: 0.0
        scale: 1.0
      # The flow model arguments
      layers: [5, 15, 5]
      populate_features: True
      num_transforms: 1
      additive: False
      residual: False
      bias: true
      scale_transform: true
      scale_transform_s_args:
        pre_act_scale: 0.4
        post_act_scale: 5.
      scale_transform_t_args:
        pre_act_scale: 0.1
        post_act_scale: 10.
      activation: torch.nn.LeakyReLU
      activation_args:
        negative_slope: 0.1

    # the optimizer
    lr: [0.01, 0.01]
    optimizer: [torch.optim.AdamW, torch.optim.AdamW]
    optimizer_args:
      - weight_decay: 0.01
      - weight_decay: 0.01
    optimizer_parameters:
      - model.flow
      - model.permutation_model
    optimizer_is_active:
      - >
        lambda training_module: training_module.current_phase == 'maximization' if hasattr(training_module, 'current_phase') else True
      - >
        lambda training_module: training_module.current_phase == 'expectation' if hasattr(training_module, 'current_phase') else True
    scheduler:
      - torch.optim.lr_scheduler.ReduceLROnPlateau
      - torch.optim.lr_scheduler.ReduceLROnPlateau
    scheduler_args:
      - mode: min
        factor: 0.5
        patience: 10
        min_lr: 0.000005
        threshold: 0.0001
      - mode: min
        factor: 0.5
        patience: 10
        min_lr: 0.000005
        threshold: 0.0001
    scheduler_name: ["lr_scheduler_maximization", "lr_scheduler_expectation"]
    scheduler_optimizer: [0, 1]
    scheduler_monitor: ["loss", "loss"]
    grad_clip_val: 1.0
    objective_args:
      nll:
        code: >
          def func(training_module, batch):
            t = training_module.forward(batch)
            res = t['log_prob']
            return -res.mean()
        function_of_interest: func
