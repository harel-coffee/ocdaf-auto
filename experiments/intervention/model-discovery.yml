class_path: ocd.training.module.OCDafTrainingModule
init_args:
  # the model
  model_cls: ocd.models.ocdaf.OCDAF
  model_args:
    in_features: 3
    # Permutation learner arguments
    use_permutation: True
    permutation_learner_cls: ocd.models.permutation.LearnablePermutation
    permutation_learner_args:
      gumbel_noise_std: >
        lambda self, training_module, **kwargs: 2 - (2 / (training_module.trainer.max_epochs)) * (training_module.current_epoch)
      permutation_type: gumbel-topk
      # maximum_basis_size: 5
    # Base distribution arguments
    base_distribution: torch.distributions.Normal
    base_distribution_args:
      loc: 0.0
      scale: 1.0
    # The flow model arguments
    layers: [15, 15, 5]
    layers_limit: [200, 200, 200]
    populate_features: True
    num_transforms: 1
    additive: False
    residual: False
    bias: true
    activation: torch.nn.LeakyReLU
    activation_args:
      negative_slope: 0.1
    scale_transform: True
    scale_transform_s_args:
      pre_act_scale: 0.4
      post_act_scale: 2.5
    scale_transform_t_args:
      pre_act_scale: 0.1
      post_act_scale: 10.0

  # the optimizer
  optimizer: [torch.optim.AdamW, torch.optim.AdamW]
  optimizer_args:
    - weight_decay: 0.25
    - weight_decay: 0.01
  optimizer_parameters:
    - model.flow
    - model.permutation_model
  optimizer_is_active:
    - >
      lambda training_module: training_module.current_phase == 'maximization' if hasattr(training_module, 'current_phase') else True
    - >
      lambda training_module: training_module.current_phase == 'expectation' if hasattr(training_module, 'current_phase') else True
  grad_clip_val: 1.0
  lr: [0.01, 0.01]
  scheduler:
    - torch.optim.lr_scheduler.ReduceLROnPlateau
    - torch.optim.lr_scheduler.ReduceLROnPlateau
  scheduler_args:
    - mode: "min"
      factor: 0.75
      patience: 2000
      min_lr: 0.0001
      threshold: 0.0001
    - mode: min
      factor: 0.75
      patience: 2000
      min_lr: 0.0001
      threshold: 0.0001
  scheduler_name: ["lr_scheduler_maximization", "lr_scheduler_expectation"]
  scheduler_optimizer: [0, 1]
  scheduler_monitor: ["loss", "loss"]
  objective_args:
    nll:
      code: >
        def func(training_module, batch):
          t = training_module.forward(batch)
          res = t['log_prob']
          return -res.mean()
      function_of_interest: func
