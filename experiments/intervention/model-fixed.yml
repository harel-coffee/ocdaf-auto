class_path: lightning_toolbox.TrainingModule
init_args:
  # the model
  model_cls: ocd.models.ocdaf.OCDAF
  model_args:
    use_permutation: False
    # Base distribution arguments
    base_distribution: torch.distributions.Normal
    base_distribution_args:
      loc: 0.0
      scale: 1.0
    # The flow model arguments
    in_features: 5
    layers: [5, 15, 5]
    populate_features: True
    scale_transform: true
    scale_transform_s_args:
      pre_act_scale: 0.2
      post_act_scale: 10.
    scale_transform_t_args:
      pre_act_scale: 0.002
      post_act_scale: 1000.
    num_transforms: 1
    additive: False
    residual: False
    bias: true
    activation: torch.nn.LeakyReLU
    activation_args:
      negative_slope: 0.1

  # the optimizer
  optimizer: [torch.optim.AdamW]
  optimizer_args:
    - weight_decay: 0.5
  optimizer_parameters:
    - model.flow
  lr: [0.005]
  scheduler:
    - ocd.training.schedulers.reduce_on_increase.ReduceLROnIncrease
  scheduler_args:
    - mode: min
      factor: 0.5
      patience: 50
      min_lr: 0.00005
      threshold: 0.001
  scheduler_interval: ['epoch']
  scheduler_name: ["lr_scheduler"]
  scheduler_monitor: ["loss/train"]
  scheduler_optimizer: [0]
  objective_args:
    nll:
      code: >
        def func(training_module, batch):
          t = training_module.forward(batch)
          res = t['log_prob']
          return -res.mean()
      function_of_interest: func
