project: test-sweep
default_root_dir: experiments/sweep
count: 10

# BASE configuration which is being used
base_config:
  trainer:
    # callbacks
    callbacks:
      - class_path: ocd.training.callbacks.data_visualizer.DataVisualizer
      - class_path: ocd.training.callbacks.phase_changer.PhaseChangerCallback
        init_args:
          starting_phase: maximization
          # Set to higher value for faster results

          # The settings regarding epoch limit values
          maximization_epoch_limit: 120
          expectation_epoch_limit: 120
          # The settings regarding the generalization gap
          patience: 25
          threshold: 0.0001
          cooldown: 50
          reset_optimizers: True
          reinitialize_weights_on_maximization: False
      - class_path: ocd.training.callbacks.save_results.SavePermutationResultsCallback
        init_args:
          num_samples: 1000
          log_every_n_epochs: 5
          save_path: experiments/sweep/non-parametric-save-files
    accelerator: gpu
    devices: 1
    num_nodes: 0
    max_epochs: 5000 # SWEEP on this
    log_every_n_steps: 1
    check_val_every_n_epoch: 1
    enable_checkpointing: true
    enable_model_summary: true
    enable_progress_bar: false
    logger:
      class_path: lightning.pytorch.loggers.WandbLogger
      init_args:
        project: smart-trainer
  data:
    class_path: lightning_toolbox.DataModule
    init_args:
      batch_size: 128
      dataset: ocd.data.SyntheticOCDDataset
  model:
    class_path: ocd.training.module.OCDafTrainingModule
    init_args:
      # the model
      model_cls: ocd.models.ocdaf.OCDAF
      model_args:
        # Permutation learner arguments
        use_permutation: True
        permutation_learner_cls: ocd.models.permutation.LearnablePermutation
        permutation_learner_args:
          gumbel_noise_std: >
            lambda self, training_module, **kwargs: 2 - (2 / (training_module.trainer.max_epochs)) * (training_module.current_epoch)
          permutation_type: hybrid-sparse-map-simulator
        # Base distribution arguments
        base_distribution: torch.distributions.Normal
        base_distribution_args:
          loc: 0.0
          scale: 1.0
        # The flow model arguments
        layers: [5, 15, 5]
        populate_features: True
        num_transforms: 1
        additive: False
        residual: False
        bias: true
        activation: torch.nn.LeakyReLU
        activation_args:
          negative_slope: 0.1

      # the optimizer
      optimizer: [torch.optim.AdamW, torch.optim.AdamW]
      optimizer_args:
        - weight_decay: 0.25
        - weight_decay: 0.1
      optimizer_parameters:
        - model.flow
        - model.permutation_model
      optimizer_is_active:
        - >
          lambda training_module: training_module.current_phase == 'maximization' if hasattr(training_module, 'current_phase') else True
        - >
          lambda training_module: training_module.current_phase == 'expectation' if hasattr(training_module, 'current_phase') else True
      grad_clip_val: 1.0
      lr: [0.01, 0.01]
      scheduler:
        - ocd.training.schedulers.reduce_on_increase.ReduceLROnIncrease
        - ocd.training.schedulers.reduce_on_increase.ReduceLROnIncrease
      scheduler_args:
        - mode: min
          factor: 0.5
          patience: 10
          min_lr: 0.000005
          threshold: 0.0001
        - mode: min
          factor: 0.5
          patience: 10
          min_lr: 0.000005
          threshold: 0.0001
      scheduler_name: ["lr_scheduler_maximization", "lr_scheduler_expectation"]
      scheduler_optimizer: [0, 1]
      scheduler_monitor: ["loss", "loss"]
      objective_args:
        nll:
          code: >
            def func(training_module, batch):
              t = training_module.forward(batch)
              res = t['log_prob']
              return -res.mean()
          function_of_interest: func

sweep_configuration:
  method: grid
  metric:
    goal: minimize
    name: metrics/best-backward_relative_penalty
  parameters:
    seed_everything:
      sweep: True
      values: [100, 200, 300]
    trainer:
      max_epochs:
        sweep: True
        values: [300, 4000, 10000, 25000]
    data:
      sweep: True
      sweep_alias:
        - chain2
        - chain3
        - erdos3
        - full3
        - chain4
        - erdos4
        - full4
        - chain5
        - erdos5
        - full5
        - chain10
        - erdos10
        - full10
        - chain25
        - erdos25
        - full25
      values:
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_2_1000_chain
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: chain, n: 2, seed: 863 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 193
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 269
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_3_1000_chain
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: chain, n: 3, seed: 947 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 199
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 9
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_3_1000_erdos_renyi
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args:
                  { graph_type: erdos_renyi, n: 3, p: 0.65, seed: 104 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 309
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 692
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_3_1000_full
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: full, n: 3, seed: 847 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 95
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 210
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_4_1000_chain
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: chain, n: 4, seed: 148 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 990
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 440
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_4_1000_erdos_renyi
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args:
                  { graph_type: erdos_renyi, n: 4, p: 0.65, seed: 597 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 392
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 565
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_4_1000_full
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: full, n: 4, seed: 325 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 997
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 53
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_5_1000_chain
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: chain, n: 5, seed: 215 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 395
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 297
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_5_1000_erdos_renyi
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args:
                  { graph_type: erdos_renyi, n: 5, p: 0.65, seed: 606 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 711
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 196
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_5_1000_full
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: full, n: 5, seed: 69 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 588
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 356
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_10_1000_chain
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: chain, n: 10, seed: 83 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 204
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 991
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_10_1000_erdos_renyi
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args:
                  { graph_type: erdos_renyi, n: 10, p: 0.65, seed: 369 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 51
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 270
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_10_1000_full
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: full, n: 10, seed: 655 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 127
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 894
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_25_1000_chain
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: chain, n: 25, seed: 59 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 495
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 588
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_25_1000_erdos_renyi
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args:
                  { graph_type: erdos_renyi, n: 25, p: 0.65, seed: 25 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 528
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 103
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
              name: non_parametric_non_linear_gaussian_25_1000_full
              observation_size: 1000
              scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
              scm_generator_args:
                graph_generator: ocd.data.scm.GraphGenerator
                graph_generator_args: { graph_type: full, n: 25, seed: 111 }
                noise_mean: 0.0
                noise_std: 1.0
                s_gamma_rbf_kernel: 1.0
                s_mean_function_activation:
                  { function_descriptor: "def func(x):\n    x[x\
                      \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
                s_mean_function_activation_signature: softplus
                s_mean_function_weights: [0.01, 0.1]
                s_variance_rbf_kernel: 1.0
                seed: 834
                t_mean_function_activation:
                  { function_descriptor: "def func(x):\n    return\
                      \ numpy.sin(x) + x", function_of_interest: func }
                t_mean_function_activation_signature: sin_plus_x
                t_mean_function_weights: [0.01, 0.1]
                t_variance_rbf_kernel: 1.0
              seed: 61
            val_size: 0.01
