# This is a sweep on different phase changing strategies and how
# it can affect the training process for larger datasets
project: sweep-scheduling
checkpoint_interval: 30
default_root_dir: experiments/sweep
use_smart_trainer: True
agent_run_args:
  count: 100
sweep_configuration:
  method: random
  metric:
    goal: minimize
    name: metrics/average-backward_relative_penalty
  parameters:
    trainer:
        max_epochs:
            sweep: True
            values: [1000, 4000, 10000]
        
        callbacks:
        - class_path: ocd.training.callbacks.data_visualizer.DataVisualizer
        - class_path: ocd.training.callbacks.phase_changer.PhaseChangerCallback
          init_args:
            sweep: True
            sweep_alias:
            - LowPatienceVal
            - MediumPatienceVal
            - HighPatienceNoInitVal
            - HighPatienceWithInitVal
            - LowPatienceTrain
            - MediumPatienceTrain
            - HighPatienceNoInitTrain
            - HighPatienceWithInitTrain
            values:
            - check_every_n_iterations: 1
              maximization_epoch_limit: 120
              expectation_epoch_limit: 120
              patience: 25
              cooldown: 50
              reset_optimizers: True
              reinitialize_weights_on_maximization: False
            - check_every_n_iterations: 1
              maximization_epoch_limit: 200
              expectation_epoch_limit: 200
              patience: 40
              cooldown: 100
              reset_optimizers: True
              reinitialize_weights_on_maximization: False
            - check_every_n_iterations: 1
              maximization_epoch_limit: 300
              expectation_epoch_limit: 300
              patience: 40
              cooldown: 200
              reset_optimizers: True
              reinitialize_weights_on_maximization: False
            - check_every_n_iterations: 1
              maximization_epoch_limit: 300
              expectation_epoch_limit: 300
              patience: 40
              cooldown: 200
              reset_optimizers: True
              reinitialize_weights_on_maximization: True
            - check_every_n_iterations: 1
              monitor_validation: False
              monitor_training: True
              maximization_epoch_limit: 120
              expectation_epoch_limit: 120
              patience: 25
              cooldown: 50
              reset_optimizers: True
              reinitialize_weights_on_maximization: False
            - check_every_n_iterations: 1
              monitor_validation: False
              monitor_training: True
              maximization_epoch_limit: 200
              expectation_epoch_limit: 200
              patience: 40
              cooldown: 100
              reset_optimizers: True
              reinitialize_weights_on_maximization: False
            - check_every_n_iterations: 1
              monitor_validation: False
              monitor_training: True
              maximization_epoch_limit: 300
              expectation_epoch_limit: 300
              patience: 40
              cooldown: 200
              reset_optimizers: True
              reinitialize_weights_on_maximization: False
            - check_every_n_iterations: 1
              monitor_validation: False
              monitor_training: True
              maximization_epoch_limit: 300
              expectation_epoch_limit: 300
              patience: 40
              cooldown: 200
              reset_optimizers: True
              reinitialize_weights_on_maximization: True
        - class_path: ocd.training.callbacks.save_results.SavePermutationResultsCallback
    
    data:
        sweep: True
        sweep_alias:
        - chain10
        - erdos10
        - full10
        - chain25
        - erdos25
        - full25
        values:
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
                name: non_parametric_non_linear_gaussian_10_1000_chain
                observation_size: 1000
                scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    graph_generator_args: {graph_type: chain, n: 10, seed: 83}
                    noise_mean: 0.0
                    noise_std: 1.0
                    s_gamma_rbf_kernel: 1.0
                    s_mean_function_activation: {function_descriptor: "def func(x):\n    x[x\
                            \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x",
                        function_of_interest: func}
                    s_mean_function_activation_signature: softplus
                    s_mean_function_weights: [0.01, 0.1]
                    s_variance_rbf_kernel: 1.0
                    seed: 204
                    t_mean_function_activation: {function_descriptor: "def func(x):\n    return\
                            \ numpy.sin(x) + x", function_of_interest: func}
                    t_mean_function_activation_signature: sin_plus_x
                    t_mean_function_weights: [0.01, 0.1]
                    t_variance_rbf_kernel: 1.0
                seed: 991
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
                name: non_parametric_non_linear_gaussian_10_1000_erdos_renyi
                observation_size: 1000
                scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    graph_generator_args: {graph_type: erdos_renyi, n: 10, p: 0.65, seed: 369}
                    noise_mean: 0.0
                    noise_std: 1.0
                    s_gamma_rbf_kernel: 1.0
                    s_mean_function_activation: {function_descriptor: "def func(x):\n    x[x\
                            \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x",
                        function_of_interest: func}
                    s_mean_function_activation_signature: softplus
                    s_mean_function_weights: [0.01, 0.1]
                    s_variance_rbf_kernel: 1.0
                    seed: 51
                    t_mean_function_activation: {function_descriptor: "def func(x):\n    return\
                            \ numpy.sin(x) + x", function_of_interest: func}
                    t_mean_function_activation_signature: sin_plus_x
                    t_mean_function_weights: [0.01, 0.1]
                    t_variance_rbf_kernel: 1.0
                seed: 270
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
                name: non_parametric_non_linear_gaussian_10_1000_full
                observation_size: 1000
                scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    graph_generator_args: {graph_type: full, n: 10, seed: 655}
                    noise_mean: 0.0
                    noise_std: 1.0
                    s_gamma_rbf_kernel: 1.0
                    s_mean_function_activation: {function_descriptor: "def func(x):\n    x[x\
                            \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x",
                        function_of_interest: func}
                    s_mean_function_activation_signature: softplus
                    s_mean_function_weights: [0.01, 0.1]
                    s_variance_rbf_kernel: 1.0
                    seed: 127
                    t_mean_function_activation: {function_descriptor: "def func(x):\n    return\
                            \ numpy.sin(x) + x", function_of_interest: func}
                    t_mean_function_activation_signature: sin_plus_x
                    t_mean_function_weights: [0.01, 0.1]
                    t_variance_rbf_kernel: 1.0
                seed: 894
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
                name: non_parametric_non_linear_gaussian_25_1000_chain
                observation_size: 1000
                scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    graph_generator_args: {graph_type: chain, n: 25, seed: 59}
                    noise_mean: 0.0
                    noise_std: 1.0
                    s_gamma_rbf_kernel: 1.0
                    s_mean_function_activation: {function_descriptor: "def func(x):\n    x[x\
                            \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x",
                        function_of_interest: func}
                    s_mean_function_activation_signature: softplus
                    s_mean_function_weights: [0.01, 0.1]
                    s_variance_rbf_kernel: 1.0
                    seed: 495
                    t_mean_function_activation: {function_descriptor: "def func(x):\n    return\
                            \ numpy.sin(x) + x", function_of_interest: func}
                    t_mean_function_activation_signature: sin_plus_x
                    t_mean_function_weights: [0.01, 0.1]
                    t_variance_rbf_kernel: 1.0
                seed: 588
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
                name: non_parametric_non_linear_gaussian_25_1000_erdos_renyi
                observation_size: 1000
                scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    graph_generator_args: {graph_type: erdos_renyi, n: 25, p: 0.65, seed: 25}
                    noise_mean: 0.0
                    noise_std: 1.0
                    s_gamma_rbf_kernel: 1.0
                    s_mean_function_activation: {function_descriptor: "def func(x):\n    x[x\
                            \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x",
                        function_of_interest: func}
                    s_mean_function_activation_signature: softplus
                    s_mean_function_weights: [0.01, 0.1]
                    s_variance_rbf_kernel: 1.0
                    seed: 528
                    t_mean_function_activation: {function_descriptor: "def func(x):\n    return\
                            \ numpy.sin(x) + x", function_of_interest: func}
                    t_mean_function_activation_signature: sin_plus_x
                    t_mean_function_weights: [0.01, 0.1]
                    t_variance_rbf_kernel: 1.0
                seed: 103
            val_size: 0.01
        - class_path: lightning_toolbox.DataModule
          init_args:
            batch_size: 32
            dataset: ocd.data.SyntheticOCDDataset
            dataset_args:
                name: non_parametric_non_linear_gaussian_25_1000_full
                observation_size: 1000
                scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    graph_generator_args: {graph_type: full, n: 25, seed: 111}
                    noise_mean: 0.0
                    noise_std: 1.0
                    s_gamma_rbf_kernel: 1.0
                    s_mean_function_activation: {function_descriptor: "def func(x):\n    x[x\
                            \ < 100] = numpy.log(1 + numpy.exp(x[x < 100]))\n    return x",
                        function_of_interest: func}
                    s_mean_function_activation_signature: softplus
                    s_mean_function_weights: [0.01, 0.1]
                    s_variance_rbf_kernel: 1.0
                    seed: 834
                    t_mean_function_activation: {function_descriptor: "def func(x):\n    return\
                            \ numpy.sin(x) + x", function_of_interest: func}
                    t_mean_function_activation_signature: sin_plus_x
                    t_mean_function_weights: [0.01, 0.1]
                    t_variance_rbf_kernel: 1.0
                seed: 61
            val_size: 0.01
